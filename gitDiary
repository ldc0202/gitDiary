目录
   mkdir <目录名>---创建一个空目录
   cd <目录名>------进入目录  
   pwd -------------显示当前目录   
   
初始化版本库
   git init
查看GIT版本号
   git version
修改用户名和EMAIL
   git config --global user.name xxx
   git config --global user.email git@163.com
查看config文档
   git --help
查看用户名和EMAIL
   git config --list --global
有多个用户名要删除其中的一些时
   git config --global --unset -user.name  xxx

把文件添加到版本库
   git add <文件名>  添加文件
   git add .  添加所有工作区变化包括修改及新文件提交到缓存区。
   git add -u 被修改的文件提交到缓存区。
   git add -A 前两功能集合
  
提交新版本（把所有缓存区内容向master分支上提交更改。）
   git commit -m "版本注释"
   
后退版本
   git reset --hard HEAD^^^^   -----后退到前面第几个版本就用几个“^”,也可以用HEAD~100代替。
   git reset --hard xxx  -----------后退到哪个版本XXX为前几位的版本号。
   
显示输入的命令记录，对跟踪版本号很有用。
   git reflog
   
查看状态
   git status
   
显示历史提交信息
   git log
   
查看工作区和版本库里面最新版本的区别
   git diff HEAD -- <文件名>
   
   
   
   
添加远程库
登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库：

$ git remote add origin git@github.com:ldc0202/learngit.git




Git 中 SSH key 生成步骤
由于本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以必须要让github仓库认证你SSH key，在此之前，必须要生成SSH key。

第1步：创建SSH Key。在windows下查看[c盘->用户->自己的用户名->.ssh]下是否有id_rsa、id_rsa.pub文件，如果没有需要手动生成。
打开git bash，在控制台中输入以下命令。

1.$ ssh-keygen -t rsa -C "youremail@example.com"
密钥类型可以用 -t 选项指定。如果没有指定则默认生成用于SSH-2的RSA密钥。这里使用的是rsa。
同时在密钥中有一个注释字段，用-C来指定所指定的注释，可以方便用户标识这个密钥，指出密钥的用途或其他有用的信息。
所以在这里输入自己的邮箱或者其他都行。输入完毕后程序同时要求输入一个密语字符串(passphrase)，空表示没有密语。
接着会让输入2次口令(password)，空表示没有口令。3次回车即可完成当前步骤，此时[c盘>用户>自己的用户名>.ssh]目录下已经生成好了。

所以是连续几个回车即可。

第2步：登录github。打开setting->SSH keys，点击右上角 New SSH key，把生成好的公钥id_rsa.pub放进 key输入框中，
再为当前的key起一个title来区分每个key。



$ git push -u origin master
加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，
在以后的推送或者拉取时就可以简化命令。

从现在起，只要本地作了提交，就可以通过命令：
$ git push origin master


从远程库克隆
$ git clone git@github.com:ldc0202/gitskills.git




在Git配置中更改远程源
git remote set-url origin git@github.com:username/projectname.git


把本地库新添加到远程库：
1.在GitHub远程服务器新建仓库。
2.点setting ---> Add SSH Key ---> 填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容
3.git remote add origin git@github.com:ldc0202/gitDiary.git
4.git push -u origin master

Enumerating objects: 3, done.
Counting objects: 100% (3/3), done.
Delta compression using up to 4 threads
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 1.83 KiB | 1.83 MiB/s, done.
Total 3 (delta 0), reused 0 (delta 0)
To github.com:ldc0202/gitDiary.git
 * [new branch]      master -> master
Branch 'master' set up to track remote branch 'master' from 'origin'.

枚举对象：3，完成。
计数对象：100%(3/3)，完成。
增量压缩，最多使用4个线程。
压缩对象：100%(2/2)，完成。
写入对象：100%(3/3)，1.83 KiB|1.83 MiB/s，完成。
总计3(增量0)，已重用0(增量0)。
至github.com：ldc0202/gitDiary.git。
*[新建分支]主->主。
分支‘master’设置为从‘Origin’跟踪远程分支‘master’。



创建与合并分支
1.git checkout -b dev       git checkout命令加上-b参数表示创建并切换
2.用git branch命令查看当前分支
  git branch命令会列出所有分支，当前分支前面会标一个*号
3.在dev分支上正常提交
4.git checkout master  
  dev分支的工作完成，我们就可以切换回master分支
5.现在，我们把dev分支的工作成果合并到master分支上
  git merge dev
  
  
Git鼓励大量使用分支：

查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>或者git switch <name>

创建+切换分支：git checkout -b <name>或者git switch -c <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>

在分支company上做了增加创建和合并分支说明后，现在切换回分支master输入这段话再担交看看冲突情况。

用带参数的git log也可以看到分支的合并情况：
git log --graph --pretty=oneline --abbrev-commit

最后，删除feature1分支：
git branch -d feature1

当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。

解决冲突就是把Git合并失败的文件手动编辑为我们希望的内容，再提交。


输入“git remote -v”查看项目远程地址。

输入“git branch -a”查看远程项目所有分支，红颜色分支代表当前所在分支，其他的所列的就是所有分支了。

输入“git remote show origin”查看当前仓库基本信息。

git rm -r --cached ignoreFile（ignoreFile就是你想忽略的文件、文件夹），让git不再tracking这些文件。

git push -u 库名 分支名   这里-u指定推送到哪个远程库的哪个分支不然在拉取时不知该合并到哪个分支会出问题的。

git log --graph --oneline --all
<<<<<<< HEAD
=======

git tag -a v.1.1 -m "扩充了内容"


请输入提交消息来解释为什么这种合并是必要的
git 在pull或者合并分支的时候有时会遇到这个界面。可以不管(直接下面3,4步)，如果要输入解释的话就需要:

1.按键盘字母 i 进入insert模式

2.修改最上面那行黄色合并信息,可以不修改

3.按键盘左上角"Esc"

4.输入":wq",注意是冒号+wq,按回车键即可

git remote rm origin   删除远程库地址
>>>>>>> 918c201277ea60348780950e264ff66a63f32730
